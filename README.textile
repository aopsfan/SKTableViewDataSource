h1. SKTableViewDataSource

h2. Overview

SKTableViewDataSource is an Objective-C library that aims at simplifying UITableViewControllers. Many times we need a quick way to display an array of custom object data in a sectioned list; this now very straight-forward. SKTableViewDataSource also implements certain UITableViewDataSource protocol methods so you don't have to.

h2. How to get this awesome project on your computer

@cd@ into your project directory and run <code>git clone git@github.com:aopsfan/SKTableViewDataSource.git</code>. Feel free to send me a pull request if you make some good changes!

h2. How it works

SKTableViewDataSource takes an NSSet of custom objects, and, given a selector to sort with, creates an organized UITableView.  It implements @numberOfSectionsInTableView@ and @numberOfRowsInSection:@, and produces helpful convenience methods so you can customize your table, such as @objectForHeaderInSection:@ and @objectForIndexPath:@.

h2. What you get

This repository comes with @SKTableViewDataSource@ itself, two dummy data models for testing (@Dude@ and @Transaction@), and two test projects; one is simple, demonstrating how easy it is to set up a table; and the other is more complex, demonstrating how to subclass @SKTableViewDataSource@ for more advanced work.

h2. Example

Let's say you have a collection of Dude objects, and your Dude.h file looks like this:

<pre><code>@interface Dude : NSObject {
    NSString *name;
    UIColor *hairColor;
    NSNumber *height;
}

@property (nonatomic, copy) NSString *name;
@property (nonatomic, retain) UIColor *hairColor;
@property (nonatomic, retain) NSNumber *height;

- (id)initWithName:(NSString *)aName hairColor:(UIColor *)aHairColor height:(NSNumber *)aHeight;

@end
</code></pre>

To create a table displaying Dudes and organized by height, here are the necessary steps:

1. Create a @compare:@ method on Dude. SKTableViewDataSource automatically calls this method on each of your Dudes to sort the cells for each section:

<pre><code>- (NSComparisonResult)compare:(Dude *)otherDude {
    return [[self name] compare:[otherDude name]];
}</code></pre>

This will order Dude objects in each section by their name.

2. Update your UITableViewController's header file to use SKTableViewDataSource:

<pre><code>#import "SKTableViewDataSource.h"

@interface SKTestTableViewController : UITableViewController <SKTableViewDataSource> {
    NSSet *data;
    SKTableViewDataSource *dataSource;
}

@end</code></pre>

The SKTableViewDataSource protocol lets you customize your table with extra UITableViewDataSource methods that this project can't implement.

3. Update your controller's @.m@ file to use SKTableViewDataSource:

In @initWithStyle@:
<pre><code>Dude *emily      = [[[Dude alloc] initWithName:@"Emily Simpson Miller" hairColor:[UIColor grayColor] height:[NSNumber numberWithInt:67]] autorelease];
Dude *tom        = [[[Dude alloc] initWithName:@"Tom Charles Simpson" hairColor:[UIColor brownColor] height:[NSNumber numberWithInt:83]] autorelease];
Dude *emilysTwin = [[[Dude alloc] initWithName:@"Ylime Simpson Miller" hairColor:[UIColor grayColor] height:[NSNumber numberWithInt:67]] autorelease];
Dude *tomsTwin   = [[[Dude alloc] initWithName:@"Mot Charles Simpson" hairColor:[UIColor brownColor] height:[NSNumber numberWithInt:83]] autorelease];
Dude *guy        = [[[Dude alloc] initWithName:@"Guy Moron Idiot" hairColor:[UIColor blackColor] height:[NSNumber numberWithInt:67]] autorelease];
data = [[NSSet alloc] initWithObjects:emily, tom, emilysTwin, tomsTwin, guy, nil];

dataSource = [[SKTableViewDataSource alloc] initWithSet:data];
dataSource.methodSource = self;
dataSource.sortSelector = @selector(height);

self.tableView.dataSource = dataSource;</code></pre>

@dataSource.methodSource = self@ lets your dataSource know where to access the "extra" UITableViewDataSource methods.
<code>dataSource.sortSelector = @selector(height)</code> tells the dataSource to section the table by the height method on Dude. (Remember, getters are still methods)
Finally, @self.tableView.dataSource = dataSource@ tells your tableView to use @dataSource@.

Delete the @numberOfSectionsInTableView@ and @numberOfRowsInSection:@ methods.

If you'd like section headers, implement @titleForHeaderInSection:@

<pre><code>- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
    return [(NSNumber *)[dataSource objectForHeaderInSection:section] stringValue];
}</code></pre>

Since we're sectioning Dudes by their height, which is an @NSNumber@, we must convert it to an NSString.

In @cellForRowAtIndexPath:@

<pre><code>Dude *dude = (Dude *)[dataSource objectForIndexPath:indexPath];
cell.textLabel.text = dude.name;</code></pre>

Here we use SKTableViewDataSource's @objectForIndexPath:@ method to find a Dude object, then display his name.

h3. Thats It! Your table should look like this:

h3. 67

- Emily Simpson Miller
- Guy Moron Idiot
- Ylime Simpson Miller

h3. 83

- Tom Charles Simpson
- Mot Charles Simpson

h2. Doing More

If you'd like to order your sections descending, simply add this line to your @initWithStyle:@ method in your controller:

<pre><code>dataSource.sectionOrderAscending = NO;</code></pre>

Likewise, run <code>dataSource.rowOrderAscending = NO;</code> to order the rows in each section descending.

If you'd like to section Dudes by the first letter of their last name, follow these steps:

1: Implement an @initial@ method on Dude:

<pre><code>- (NSString *)initial {
    NSArray *arrayOfNames = [self.name componentsSeparatedByString:@" "];
    NSString *lastName = [arrayOfNames objectAtIndex:[arrayOfNames count]-1];
    unichar newChar = [lastName characterAtIndex:0];
    NSString *initial = [NSString stringWithFormat:@"%C", newChar];
    
    return initial;
}</code></pre>

2. Change your @dataSource@ 's @sortSelector@:

<pre><code>dataSource.sortSelector = @selector(initial);</code></pre>

3. Update @titleForHeaderInSection:@

<pre><code>return (NSString *)[dataSource objectForHeaderInSection:section];</code></pre>
